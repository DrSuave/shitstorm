(function() {
  var PrettyError, chai, defaultStyle, error, isFormatted;

  chai = require('chai');

  PrettyError = require('../src/PrettyError');

  defaultStyle = require('../src/defaultStyle');

  chai.should();

  isFormatted = function(exc) {
    return exc.stack.indexOf('  \u001b[0m\u001b[97m\u001b[41m') === 0;
  };

  error = function(what) {
    var e;
    if (typeof what === 'string') {
      return error(function() {
        throw Error(what);
      });
    } else if (what instanceof Function) {
      try {
        what();
      } catch (error1) {
        e = error1;
        return e;
      }
    }
    throw Error("bad argument for error");
  };

  describe("PrettyError", function() {
    describe("constructor()", function() {
      return it("should work", function() {
        return new PrettyError;
      });
    });
    describe("getObject", function() {
      return it("should return a string", function() {
        var p;
        p = new PrettyError;
        return p.getObject(error("hello")).should.be.an('object');
      });
    });
    describe("style", function() {
      it("should, by default, return the contents in `default-style`", function() {
        var p;
        p = new PrettyError;
        return p.style.should.eql(defaultStyle());
      });
      return it("should return different contents after appending some styles", function() {
        var p;
        p = new PrettyError;
        p.appendStyle({
          'some selector': {
            'display': 'block'
          }
        });
        return p.style.should.not.eql(defaultStyle());
      });
    });
    describe("render()", function() {
      it("should work", function() {
        var e, e2, e3, e4, e5, e6, p;
        p = new PrettyError;
        p.skipNodeFiles();
        p.appendStyle({
          'pretty-error': {
            marginLeft: 4
          }
        });
        e = error(function() {
          return "a".should.equal("b");
        });
        console.log(p.render(e, false));
        e2 = error(function() {
          return Array.split(Object);
        });
        console.log(p.render(e2, false));
        e3 = "Plain error message";
        console.log(p.render(e3, false));
        e4 = {
          message: "Custom error message",
          kind: "Custom Error"
        };
        console.log(p.render(e4, false));
        e5 = {
          message: "Error with custom stack",
          stack: ['line one', 'line two'],
          wrapper: 'UnhandledRejection'
        };
        console.log(p.render(e5, false));
        e6 = error(function() {
          return PrettyError.someNonExistingFuncion();
        });
        return console.log(p.render(e6, false));
      });
      return it.skip("should render without colors if pe._useColors is false", function() {
        var e, p;
        p = new PrettyError;
        p.withoutColors();
        p.skipNodeFiles();
        p.appendStyle({
          'pretty-error': {
            marginLeft: 4
          }
        });
        e = error(function() {
          return "a".should.equal("b");
        });
        return console.log(p.render(e, false));
      });
    });
    return describe("start()", function() {
      var prepareStackTrace;
      prepareStackTrace = null;
      beforeEach(function() {
        prepareStackTrace = Error.prepareStackTrace;
        return Error.prepareStackTrace = null;
      });
      afterEach(function() {
        return Error.prepareStackTrace = prepareStackTrace;
      });
      it("throws unformatted error when not started", function() {
        var exc;
        try {
          throw new Error("foo bar");
        } catch (error1) {
          exc = error1;
        }
        return isFormatted(exc).should.be.eql(false);
      });
      return it("throws formatted the error", function() {
        var exc;
        PrettyError.start();
        try {
          throw new Error("foo bar");
        } catch (error1) {
          exc = error1;
        }
        isFormatted(exc).should.be.eql(true);
        exc.stack.split(/\n/g).length.should.be.above(2);
        return PrettyError.stop();
      });
    });
  });

}).call(this);
