"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.geoPropTypes = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function getDisplayName(WrappedComponent) {
    return "Geolocated(" + (WrappedComponent.displayName || WrappedComponent.name || "Component") + ")";
}

var geolocated = function geolocated() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$positionOptions = _ref.positionOptions,
        positionOptions = _ref$positionOptions === undefined ? {
        enableHighAccuracy: true,
        maximumAge: 0,
        timeout: Infinity
    } : _ref$positionOptions,
        _ref$userDecisionTime = _ref.userDecisionTimeout,
        userDecisionTimeout = _ref$userDecisionTime === undefined ? null : _ref$userDecisionTime,
        _ref$suppressLocation = _ref.suppressLocationOnMount,
        suppressLocationOnMount = _ref$suppressLocation === undefined ? false : _ref$suppressLocation,
        _ref$watchPosition = _ref.watchPosition,
        watchPosition = _ref$watchPosition === undefined ? false : _ref$watchPosition,
        _ref$geolocationProvi = _ref.geolocationProvider,
        geolocationProvider = _ref$geolocationProvi === undefined ? typeof navigator !== "undefined" && navigator.geolocation : _ref$geolocationProvi;

    return function (WrappedComponent) {
        var result = function (_Component) {
            _inherits(Geolocated, _Component);

            function Geolocated(props) {
                _classCallCheck(this, Geolocated);

                var _this = _possibleConstructorReturn(this, (Geolocated.__proto__ || Object.getPrototypeOf(Geolocated)).call(this, props));

                _this.state = {
                    coords: null,
                    isGeolocationAvailable: Boolean(geolocationProvider),
                    isGeolocationEnabled: true, // be optimistic
                    positionError: null
                };

                _this.isCurrentlyMounted = false;

                _this.onPositionError = _this.onPositionError.bind(_this);
                _this.onPositionSuccess = _this.onPositionSuccess.bind(_this);
                _this.cancelUserDecisionTimeout = _this.cancelUserDecisionTimeout.bind(_this);
                _this.getLocation = _this.getLocation.bind(_this);
                return _this;
            }

            _createClass(Geolocated, [{
                key: "cancelUserDecisionTimeout",
                value: function cancelUserDecisionTimeout() {
                    if (this.userDecisionTimeoutId) {
                        clearTimeout(this.userDecisionTimeoutId);
                    }
                }
            }, {
                key: "onPositionError",
                value: function onPositionError(positionError) {
                    this.cancelUserDecisionTimeout();
                    if (this.isCurrentlyMounted) {
                        this.setState({
                            coords: null,
                            isGeolocationAvailable: this.state.isGeolocationAvailable,
                            isGeolocationEnabled: false,
                            positionError: positionError
                        });
                    }
                    if (this.props.onError) {
                        this.props.onError(positionError);
                    }
                }
            }, {
                key: "onPositionSuccess",
                value: function onPositionSuccess(position) {
                    this.cancelUserDecisionTimeout();
                    if (this.isCurrentlyMounted) {
                        this.setState({
                            coords: position.coords,
                            isGeolocationAvailable: this.state.isGeolocationAvailable,
                            isGeolocationEnabled: true,
                            positionError: null
                        });
                    }
                    if (this.props.onSuccess) {
                        this.props.onSuccess(position);
                    }
                }
            }, {
                key: "getLocation",
                value: function getLocation() {
                    var _this2 = this;

                    if (!geolocationProvider || !geolocationProvider.getCurrentPosition || !geolocationProvider.watchPosition) {
                        throw new Error("The provided geolocation provider is invalid");
                    }

                    var funcPosition = (watchPosition ? geolocationProvider.watchPosition : geolocationProvider.getCurrentPosition).bind(geolocationProvider);

                    if (userDecisionTimeout) {
                        this.userDecisionTimeoutId = setTimeout(function () {
                            _this2.onPositionError();
                        }, userDecisionTimeout);
                    }

                    this.watchId = funcPosition(this.onPositionSuccess, this.onPositionError, positionOptions);
                }
            }, {
                key: "componentDidMount",
                value: function componentDidMount() {
                    this.isCurrentlyMounted = true;
                    if (!suppressLocationOnMount) {
                        this.getLocation();
                    }
                }
            }, {
                key: "componentWillUnmount",
                value: function componentWillUnmount() {
                    this.isCurrentlyMounted = false;
                    this.cancelUserDecisionTimeout();
                    if (watchPosition) {
                        geolocationProvider.clearWatch(this.watchId);
                    }
                }
            }, {
                key: "render",
                value: function render() {
                    return _react2.default.createElement(WrappedComponent, _extends({}, this.state, this.props));
                }
            }]);

            return Geolocated;
        }(_react.Component);
        result.displayName = getDisplayName(WrappedComponent);
        result.propTypes = {
            onError: _propTypes2.default.func,
            onSuccess: _propTypes2.default.func
        };
        return result;
    };
};

exports.default = geolocated;
var geoPropTypes = exports.geoPropTypes = {
    coords: _propTypes2.default.shape({
        latitude: _propTypes2.default.number,
        longitude: _propTypes2.default.number,
        altitude: _propTypes2.default.number,
        accuracy: _propTypes2.default.number,
        altitudeAccuracy: _propTypes2.default.number,
        heading: _propTypes2.default.number,
        speed: _propTypes2.default.number
    }),
    isGeolocationAvailable: _propTypes2.default.bool,
    isGeolocationEnabled: _propTypes2.default.bool,
    positionError: _propTypes2.default.shape({
        code: _propTypes2.default.oneOf([1, 2, 3]),
        message: _propTypes2.default.string
    }),
    watchPosition: _propTypes2.default.bool
};