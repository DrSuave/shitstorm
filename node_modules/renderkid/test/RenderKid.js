(function() {
  var RenderKid, match, strip;

  RenderKid = require('../src/RenderKid');

  strip = require('../src/AnsiPainter').strip;

  match = function(input, expected, setStuff) {
    var r;
    r = new RenderKid;
    r.style({
      span: {
        display: 'inline'
      },
      div: {
        display: 'block'
      }
    });
    if (typeof setStuff === "function") {
      setStuff(r);
    }
    return strip(r.render(input)).trim().should.equal(expected.trim());
  };

  describe("RenderKid", function() {
    describe("constructor()", function() {
      return it("should work", function() {
        return new RenderKid;
      });
    });
    describe("whitespace management - inline", function() {
      it("shouldn't put extra whitespaces", function() {
        var expected, input;
        input = "\na<span>b</span>c\n";
        expected = "\nabc\n";
        return match(input, expected);
      });
      it("should allow 1 whitespace character on each side", function() {
        var expected, input;
        input = "\na<span>   b     </span>c\n";
        expected = "\na b c\n";
        return match(input, expected);
      });
      it("should eliminate extra whitespaces inside text", function() {
        var expected, input;
        input = "\na<span>b1 \n  b2</span>c\n";
        expected = "\nab1 b2c\n";
        return match(input, expected);
      });
      it("should allow line breaks with <br />", function() {
        var expected, input;
        input = "\na<span>b1<br />b2</span>c\n";
        expected = "\nab1\nb2c\n";
        return match(input, expected);
      });
      it("should allow line breaks with &nl;", function() {
        var expected, input;
        input = "\na<span>b1&nl;b2</span>c\n";
        expected = "\nab1\nb2c\n";
        return match(input, expected);
      });
      return it("should allow whitespaces with &sp;", function() {
        var expected, input;
        input = "\na<span>b1&sp;b2</span>c\n";
        expected = "\nab1 b2c\n";
        return match(input, expected);
      });
    });
    return describe("whitespace management - block", function() {
      it("should add one linebreak between two blocks", function() {
        var expected, input;
        input = "\n<div>a</div>\n<div>b</div>\n";
        expected = "\na\nb\n";
        return match(input, expected);
      });
      it("should ignore empty blocks", function() {
        var expected, input;
        input = "\n<div>a</div>\n<div></div>\n<div>b</div>\n";
        expected = "\na\nb\n";
        return match(input, expected);
      });
      it("should add an extra linebreak between two adjacent blocks inside an inline", function() {
        var expected, input;
        input = "\n<span>\n  <div>a</div>\n  <div>b</div>\n</span>\n";
        expected = "\na\n\nb\n";
        return match(input, expected);
      });
      it("example: div(marginBottom:1)+div", function() {
        var expected, input;
        input = "\n<div class=\"first\">a</div>\n<div>b</div>\n";
        expected = "\na\n\nb\n";
        return match(input, expected, function(r) {
          return r.style({
            '.first': {
              marginBottom: 1
            }
          });
        });
      });
      it("example: div+div(marginTop:1)", function() {
        var expected, input;
        input = "\n<div>a</div>\n<div class=\"second\">b</div>\n";
        expected = "\na\n\nb\n";
        return match(input, expected, function(r) {
          return r.style({
            '.second': {
              marginTop: 1
            }
          });
        });
      });
      it("example: div(marginBottom:1)+div(marginTop:1)", function() {
        var expected, input;
        input = "\n<div class=\"first\">a</div>\n<div class=\"second\">b</div>\n";
        expected = "\na\n\n\nb\n";
        return match(input, expected, function(r) {
          return r.style({
            '.first': {
              marginBottom: 1
            },
            '.second': {
              marginTop: 1
            }
          });
        });
      });
      it("example: div(marginBottom:2)+div(marginTop:1)", function() {
        var expected, input;
        input = "\n<div class=\"first\">a</div>\n<div class=\"second\">b</div>\n";
        expected = "\na\n\n\n\nb\n";
        return match(input, expected, function(r) {
          return r.style({
            '.first': {
              marginBottom: 2
            },
            '.second': {
              marginTop: 1
            }
          });
        });
      });
      return it("example: div(marginBottom:2)+span+div(marginTop:1)", function() {
        var expected, input;
        input = "\n<div class=\"first\">a</div>\n<span>span</span>\n<div class=\"second\">b</div>\n";
        expected = "\na\n\n\nspan\n\nb\n";
        return match(input, expected, function(r) {
          return r.style({
            '.first': {
              marginBottom: 2
            },
            '.second': {
              marginTop: 1
            }
          });
        });
      });
    });
  });

}).call(this);
