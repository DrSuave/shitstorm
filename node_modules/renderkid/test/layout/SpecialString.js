(function() {
  var S;

  S = require('../../src/layout/SpecialString');

  describe("SpecialString", function() {
    describe('SpecialString()', function() {
      return it('should return instance', function() {
        return S('s').should.be.instanceOf(S);
      });
    });
    describe('length()', function() {
      it('should return correct length for normal text', function() {
        return S('hello').length.should.equal(5);
      });
      it('should return correct length for text containing tabs and tags', function() {
        return S('<a>he<you />l\tlo</a>').length.should.equal(13);
      });
      it("shouldn't count empty tags as tags", function() {
        return S('<>><').length.should.equal(4);
      });
      it("should count length of single tag as 0", function() {
        return S('<html>').length.should.equal(0);
      });
      return it("should work correctly with html quoted characters", function() {
        return S(' &gt;&lt; &sp;').length.should.equal(5);
      });
    });
    describe('splitIn()', function() {
      it("should work correctly with normal text", function() {
        return S("123456").splitIn(3).should.be.like(['123', '456']);
      });
      it("should work correctly with normal text containing tabs and tags", function() {
        return S("12\t3<hello>456").splitIn(3).should.be.like(['12', '\t', '3<hello>45', '6']);
      });
      it("should not trimLeft all lines when trimLeft is no", function() {
        return S('abc def').splitIn(3).should.be.like(['abc', ' de', 'f']);
      });
      return it("should trimLeft all lines when trimLeft is true", function() {
        return S('abc def').splitIn(3, true).should.be.like(['abc', 'def']);
      });
    });
    describe('cut()', function() {
      it("should work correctly with text containing tabs and tags", function() {
        var cut, original;
        original = S("12\t3<hello>456");
        cut = original.cut(2, 3);
        original.str.should.equal('123<hello>456');
        return cut.str.should.equal('\t');
      });
      it("should trim left when trimLeft is true", function() {
        var cut, original;
        original = S(' 132');
        cut = original.cut(0, 1, true);
        original.str.should.equal('32');
        return cut.str.should.equal('1');
      });
      return it("should be greedy", function() {
        return S("ab<tag>a").cut(0, 2).str.should.equal("ab<tag>");
      });
    });
    describe('isOnlySpecialChars()', function() {
      return it("should work", function() {
        S("12\t3<hello>456").isOnlySpecialChars().should.equal(false);
        return S("<hello>").isOnlySpecialChars().should.equal(true);
      });
    });
    describe('clone()', function() {
      return it("should return independent instance", function() {
        var a, b;
        a = S('hello');
        b = a.clone();
        a.str.should.equal(b.str);
        return a.should.not.equal(b);
      });
    });
    describe('trim()', function() {
      it("should return an independent instance", function() {
        var s;
        s = S('');
        return s.trim().should.not.equal(s);
      });
      it('should return the same string when trim is not required', function() {
        return S('hello').trim().str.should.equal('hello');
      });
      return it('should return trimmed string', function() {
        return S(' hello').trim().str.should.equal('hello');
      });
    });
    describe('trimLeft()', function() {
      return it("should only trim on the left", function() {
        return S(' hello ').trimLeft().str.should.equal('hello ');
      });
    });
    return describe('trimRight()', function() {
      return it("should only trim on the right", function() {
        return S(' hello ').trimRight().str.should.equal(' hello');
      });
    });
  });

}).call(this);
