(function() {
  var Layout, conf, get, object, open, ref;

  Layout = require('../../src/Layout');

  object = require('utila').object;

  ref = (function() {
    var c, defaultBlockConfig, ret, show;
    show = function(layout) {
      var got;
      got = layout.get();
      return got = got.replace(/<[^>]+>/g, '');
    };
    defaultBlockConfig = {
      linePrependor: {
        options: {
          amount: 2
        }
      }
    };
    c = function(add) {
      if (add == null) {
        add = {};
      }
      return object.append(defaultBlockConfig, add);
    };
    ret = {};
    ret.open = function(block, name, top, bottom) {
      var b, config;
      if (top == null) {
        top = 0;
      }
      if (bottom == null) {
        bottom = 0;
      }
      config = c({
        blockPrependor: {
          options: {
            amount: top
          }
        },
        blockAppendor: {
          options: {
            amount: bottom
          }
        }
      });
      b = block.openBlock(config, name);
      b.write(name + ' | top ' + top + ' bottom ' + bottom);
      return b;
    };
    ret.get = function(layout) {
      return layout.get().replace(/<[^>]+>/g, '');
    };
    ret.conf = function(props) {
      var config;
      config = {};
      if (props.left != null) {
        object.appendOnto(config, {
          linePrependor: {
            options: {
              amount: props.left
            }
          }
        });
      }
      if (props.right != null) {
        object.appendOnto(config, {
          lineAppendor: {
            options: {
              amount: props.right
            }
          }
        });
      }
      if (props.top != null) {
        object.appendOnto(config, {
          blockPrependor: {
            options: {
              amount: props.top
            }
          }
        });
      }
      if (props.bottom != null) {
        object.appendOnto(config, {
          blockAppendor: {
            options: {
              amount: props.bottom
            }
          }
        });
      }
      if (props.width != null) {
        object.appendOnto(config, {
          width: props.width
        });
      }
      if (props.bullet === true) {
        object.appendOnto(config, {
          linePrependor: {
            options: {
              bullet: {
                char: '-',
                alignment: 'left'
              }
            }
          }
        });
      }
      return config;
    };
    return ret;
  })(), open = ref.open, get = ref.get, conf = ref.conf;

  describe("Layout", function() {
    describe("inline inputs", function() {
      it("should be merged", function() {
        var l;
        l = new Layout;
        l.write('a');
        l.write('b');
        return get(l).should.equal('ab');
      });
      it("should be correctly wrapped", function() {
        var block, l;
        l = new Layout;
        block = l.openBlock(conf({
          width: 20
        }));
        block.write('123456789012345678901234567890');
        block.close();
        return get(l).should.equal('12345678901234567890\n1234567890');
      });
      it("should trim from left when wrapping to a new line", function() {
        var block, l;
        l = new Layout;
        block = l.openBlock(conf({
          width: 20
        }));
        block.write('12345678901234567890 \t 123456789012345678901');
        block.close();
        return get(l).should.equal('12345678901234567890\n12345678901234567890\n1');
      });
      it("should handle line breaks correctly", function() {
        var block, l;
        l = new Layout;
        block = l.openBlock(conf({
          width: 20
        }));
        block.write('\na\n\nb\n');
        block.close();
        return get(l).should.equal('\na\n\nb\n');
      });
      return it("should not put extra line breaks when a line is already broken", function() {
        var block, l;
        l = new Layout;
        block = l.openBlock(conf({
          width: 20
        }));
        block.write('01234567890123456789\n0123456789');
        block.close();
        return get(l).should.equal('01234567890123456789\n0123456789');
      });
    });
    describe("horizontal margins", function() {
      it("should account for left margins", function() {
        var block, l;
        l = new Layout;
        block = l.openBlock(conf({
          width: 20,
          left: 2
        }));
        block.write('01');
        block.close();
        return get(l).should.equal('  01');
      });
      it("should account for right margins", function() {
        var block, l;
        l = new Layout;
        block = l.openBlock(conf({
          width: 20,
          right: 2
        }));
        block.write('01');
        block.close();
        return get(l).should.equal('01  ');
      });
      it("should account for both margins", function() {
        var block, l;
        l = new Layout;
        block = l.openBlock(conf({
          width: 20,
          right: 2,
          left: 1
        }));
        block.write('01');
        block.close();
        return get(l).should.equal(' 01  ');
      });
      it("should break lines according to left margins", function() {
        var block, l;
        l = new Layout;
        global.tick = true;
        block = l.openBlock(conf({
          width: 20,
          left: 2
        }));
        block.write('01234567890123456789');
        block.close();
        global.tick = false;
        return get(l).should.equal('  01234567890123456789');
      });
      it("should break lines according to right margins", function() {
        var block, l;
        l = new Layout;
        block = l.openBlock(conf({
          width: 20,
          right: 2
        }));
        block.write('01234567890123456789');
        block.close();
        return get(l).should.equal('01234567890123456789  ');
      });
      it("should break lines according to both margins", function() {
        var block, l;
        l = new Layout;
        block = l.openBlock(conf({
          width: 20,
          right: 2,
          left: 1
        }));
        block.write('01234567890123456789');
        block.close();
        return get(l).should.equal(' 01234567890123456789  ');
      });
      return it("should break lines according to terminal width", function() {
        var block, l;
        l = new Layout({
          terminalWidth: 20
        });
        block = l.openBlock(conf({
          right: 2,
          left: 1
        }));
        block.write('01234567890123456789');
        block.close();
        return get(l).should.equal(' 01234567890123456   789  ');
      });
    });
    describe("lines and blocks", function() {
      it("should put one break line between: line, block", function() {
        var l;
        l = new Layout;
        l.write('a');
        l.openBlock().write('b').close();
        return get(l).should.equal('a\nb');
      });
      it("should put one break line between: block, line", function() {
        var l;
        l = new Layout;
        l.openBlock().write('a').close();
        l.write('b');
        return get(l).should.equal('a\nb');
      });
      it("should put one break line between: line, block, line", function() {
        var l;
        l = new Layout;
        l.write('a');
        l.openBlock().write('b').close();
        l.write('c');
        return get(l).should.equal('a\nb\nc');
      });
      it("margin top should work for: line, block", function() {
        var l;
        l = new Layout;
        l.write('a');
        l.openBlock(conf({
          top: 2
        })).write('b').close();
        return get(l).should.equal('a\n\n\nb');
      });
      it("margin top should work for: block, line", function() {
        var l;
        l = new Layout;
        l.openBlock(conf({
          top: 1
        })).write('a').close();
        l.write('b');
        return get(l).should.equal('\na\nb');
      });
      it("margin top should work for: block, line, when block starts with a break", function() {
        var l;
        l = new Layout;
        l.openBlock(conf({
          top: 1
        })).write('\na').close();
        l.write('b');
        return get(l).should.equal('\n\na\nb');
      });
      it("margin top should work for: line, block, when line ends with a break", function() {
        var l;
        l = new Layout;
        l.write('a\n');
        l.openBlock(conf({
          top: 1
        })).write('b').close();
        return get(l).should.equal('a\n\n\nb');
      });
      it("margin top should work for: line, block, when there are two breaks in between", function() {
        var l;
        l = new Layout;
        l.write('a\n');
        l.openBlock(conf({
          top: 1
        })).write('\nb').close();
        return get(l).should.equal('a\n\n\n\nb');
      });
      it("margin bottom should work for: line, block", function() {
        var l;
        l = new Layout;
        l.write('a');
        l.openBlock(conf({
          bottom: 1
        })).write('b').close();
        return get(l).should.equal('a\nb\n');
      });
      it("margin bottom should work for: block, line", function() {
        var l;
        l = new Layout;
        l.openBlock(conf({
          bottom: 1
        })).write('a').close();
        l.write('b');
        return get(l).should.equal('a\n\nb');
      });
      it("margin bottom should work for: block, line, when block ends with a break", function() {
        var l;
        l = new Layout;
        l.openBlock(conf({
          bottom: 1
        })).write('a\n').close();
        l.write('b');
        return get(l).should.equal('a\n\n\nb');
      });
      it("margin bottom should work for: block, line, when line starts with a break", function() {
        var l;
        l = new Layout;
        l.openBlock(conf({
          bottom: 1
        })).write('a').close();
        l.write('\nb');
        return get(l).should.equal('a\n\n\nb');
      });
      return it("margin bottom should work for: block, line, when there are two breaks in between", function() {
        var l;
        l = new Layout;
        l.openBlock(conf({
          bottom: 1
        })).write('a\n').close();
        l.write('\nb');
        return get(l).should.equal('a\n\n\n\nb');
      });
    });
    describe("blocks and blocks", function() {
      it("should not get extra break lines for full-width lines", function() {
        var l;
        l = new Layout;
        l.openBlock(conf({
          width: 20
        })).write('01234567890123456789').close();
        l.openBlock().write('b').close();
        return get(l).should.equal('01234567890123456789\nb');
      });
      it("should not get extra break lines for full-width lines followed by a margin", function() {
        var l;
        l = new Layout;
        l.openBlock(conf({
          width: 20,
          bottom: 1
        })).write('01234567890123456789').close();
        l.openBlock().write('b').close();
        return get(l).should.equal('01234567890123456789\n\nb');
      });
      it("a(top: 0, bottom: 0) b(top: 0, bottom: 0)", function() {
        var l;
        l = new Layout;
        l.openBlock().write('a').close();
        l.openBlock().write('b').close();
        return get(l).should.equal('a\nb');
      });
      it("a(top: 0, bottom: 0) b(top: 1, bottom: 0)", function() {
        var l;
        l = new Layout;
        l.openBlock().write('a').close();
        l.openBlock(conf({
          top: 1
        })).write('b').close();
        return get(l).should.equal('a\n\nb');
      });
      it("a(top: 0, bottom: 1) b(top: 0, bottom: 0)", function() {
        var l;
        l = new Layout;
        l.openBlock(conf({
          bottom: 1
        })).write('a').close();
        l.openBlock().write('b').close();
        return get(l).should.equal('a\n\nb');
      });
      it("a(top: 0, bottom: 1   ) b(   top: 1, bottom: 0)", function() {
        var l;
        l = new Layout;
        l.openBlock(conf({
          bottom: 1
        })).write('a').close();
        l.openBlock(conf({
          top: 1
        })).write('b').close();
        return get(l).should.equal('a\n\n\nb');
      });
      it("a(top: 0, bottom: 1 br) b(br top: 1, bottom: 0)", function() {
        var l;
        l = new Layout;
        l.openBlock(conf({
          bottom: 1
        })).write('a\n').close();
        l.openBlock(conf({
          top: 1
        })).write('\nb').close();
        return get(l).should.equal('a\n\n\n\n\nb');
      });
      return it("a(top: 2, bottom: 3 a1-br-a2) b(br-b1-br-br-b2-br top: 2, bottom: 3)", function() {
        var l;
        l = new Layout;
        l.openBlock(conf({
          top: 2,
          bottom: 3
        })).write('a1\na2').close();
        l.openBlock(conf({
          top: 2,
          bottom: 3
        })).write('\nb1\n\nb2\n').close();
        return get(l).should.equal('\n\na1\na2\n\n\n\n\n\n\nb1\n\nb2\n\n\n\n');
      });
    });
    describe("nesting", function() {
      it("should break one line for nested blocks", function() {
        var b, c, l;
        l = new Layout;
        l.write('a');
        b = l.openBlock();
        c = b.openBlock().write('c').close();
        b.close();
        return get(l).should.equal('a\nc');
      });
      it("a(left: 2) > b(top: 2)", function() {
        var a, l;
        l = new Layout;
        a = l.openBlock(conf({
          left: 2
        }));
        a.openBlock(conf({
          top: 2
        })).write('b').close();
        a.close();
        return get(l).should.equal('  \n  \n  b');
      });
      return it("a(left: 2) > b(bottom: 2)", function() {
        var a, l;
        l = new Layout;
        a = l.openBlock(conf({
          left: 2
        }));
        a.openBlock(conf({
          bottom: 2
        })).write('b').close();
        a.close();
        return get(l).should.equal('  b\n  \n  ');
      });
    });
    return describe("bullets", function() {
      it("basic bullet", function() {
        var l;
        l = new Layout;
        l.openBlock(conf({
          left: 3,
          bullet: true
        })).write('a').close();
        return get(l).should.equal('-  a');
      });
      return it("a(left: 3, bullet) > b(top:1)", function() {
        var a, b, l;
        l = new Layout;
        a = l.openBlock(conf({
          left: 3,
          bullet: true
        }));
        b = a.openBlock(conf({
          top: 1
        })).write('b').close();
        a.close();
        return get(l).should.equal('-  \n   b');
      });
    });
  });

}).call(this);
