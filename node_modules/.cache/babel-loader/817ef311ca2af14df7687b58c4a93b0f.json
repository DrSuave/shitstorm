{"ast":null,"code":"import _classCallCheck from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/src/Components/forecast.js\";\nimport React from 'react';\n\nvar Forecast =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Forecast, _React$Component);\n\n  function Forecast() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Forecast);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Forecast)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.State = {\n      0: 0 // humanTime = () => {\n      //     var currentForecast = this.props.currentForecast;\n      //     var i = 0;\n      //     var currentForecast = currentForecast.list.map(item => (\n      //         var secondsSinceEpoch = currentForecast.list[i].dt;\n      //         var date = new Date(secondsSinceEpoch * 1000);\n      //         var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n      //         var day = days[date.getUTCDay()];\n      //         var utcHour = date.getUTCHours();\n      //         if (utcHour > 12) {\n      //             var hour = utcHour - 12;\n      //             hour = hour + \"pm\";\n      //         }\n      //         else {\n      //             var hour = utcHour + \"am\"\n      //         }\n      //         var dateStr = [day, hour].join(\" \"); \n      //         this.setState({\n      //                 [i]: dateStr,\n      //         })\n      //         i++;\n      //     ))\n      // }\n\n    };\n    return _this;\n  }\n\n  _createClass(Forecast, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      //var currentForecast = this.props.currentForecast;\n      var i = 0;\n      this.props.currentForecast.list.map(function (item) {\n        //Human readable time\n        var secondsSinceEpoch = _this2.props.currentForecast.list[i].dt;\n        var date = new Date(secondsSinceEpoch * 1000);\n        var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n        var day = days[date.getUTCDay()];\n        var utcHour = date.getUTCHours();\n\n        if (utcHour > 12) {\n          var hour = utcHour - 12;\n\n          if (hour == 0) {\n            hour = 12;\n          }\n\n          hour = hour + \"pm\";\n        } else {\n          var hour = utcHour + \"am\";\n        }\n\n        var dateStr = [day, hour].join(\" \");\n        _this2.props.currentForecast.list[i].dt = dateStr; //human readable temp\n\n        var humanTemp = Math.floor(item.main.temp);\n        humanTemp = humanTemp + 'Â°';\n        _this2.props.currentForecast.list[i].main.temp = humanTemp; //meters per second to MPH\n\n        var imperialWind = Math.floor(_this2.props.currentForecast.list[i].wind.speed * 2.237);\n        _this2.props.currentForecast.list[i].wind.speed = imperialWind;\n        i++;\n\n        _this2.forceUpdate();\n      }); // for(let i = 0; i<currentForecast.list.length;  i+=1) {\n      //     var secondsSinceEpoch = currentForecast.list[i].dt;\n      //     var date = new Date(secondsSinceEpoch * 1000);\n      //     var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n      //     var day = days[date.getUTCDay()];\n      //     var utcHour = date.getUTCHours();\n      //     if (utcHour > 12) {\n      //         var hour = utcHour - 12;\n      //         hour = hour + \"pm\";\n      //     }\n      //     else {\n      //         var hour = utcHour + \"am\"\n      //     }\n      //     var dateStr = [day, hour].join(\" \"); \n      //     this.setState({\n      //             [i]: dateStr,\n      //     })\n      // } \n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var i = 0;\n      return this.props.currentForecast.list.map(function (item) {\n        return React.createElement(\"div\", {\n          className: \"weatherTile\",\n          key: item.dt_txt,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, item.dt), React.createElement(\"img\", {\n          src: \"http://openweathermap.org/img/w/\" + item.weather[i].icon + \".png\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, item.main.temp), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, item.weather[i].description), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, _this3.props.currentForecast.list[i].wind.speed, \"MPH\"));\n      });\n    }\n  }]);\n\n  return Forecast;\n}(React.Component);\n\nexport default Forecast;","map":{"version":3,"sources":["/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/src/Components/forecast.js"],"names":["React","Forecast","State","i","props","currentForecast","list","map","item","secondsSinceEpoch","dt","date","Date","days","day","getUTCDay","utcHour","getUTCHours","hour","dateStr","join","humanTemp","Math","floor","main","temp","imperialWind","wind","speed","forceUpdate","dt_txt","weather","icon","description","Component"],"mappings":"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","sourcesContent":["import React from 'react'\n\n\nclass Forecast extends React.Component {\n    \n\n   State = {\n        0:0\n    }\n\n    // humanTime = () => {\n    //     var currentForecast = this.props.currentForecast;\n    //     var i = 0;\n    //     var currentForecast = currentForecast.list.map(item => (\n    //         var secondsSinceEpoch = currentForecast.list[i].dt;\n    //         var date = new Date(secondsSinceEpoch * 1000);\n    //         var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    //         var day = days[date.getUTCDay()];\n    //         var utcHour = date.getUTCHours();\n    //         if (utcHour > 12) {\n    //             var hour = utcHour - 12;\n    //             hour = hour + \"pm\";\n    //         }\n    //         else {\n    //             var hour = utcHour + \"am\"\n    //         }\n    //         var dateStr = [day, hour].join(\" \"); \n    //         this.setState({\n    //                 [i]: dateStr,\n    //         })\n    //         i++;\n    //     ))\n    // }\n\n    componentDidMount() {\n        //var currentForecast = this.props.currentForecast;\n        var i = 0;\n        this.props.currentForecast.list.map(item => {\n            //Human readable time\n            var secondsSinceEpoch = this.props.currentForecast.list[i].dt;\n            var date = new Date(secondsSinceEpoch * 1000);\n            var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n            var day = days[date.getUTCDay()];\n            var utcHour = date.getUTCHours();\n            if (utcHour > 12) {\n                var hour = utcHour - 12;\n                if (hour == 0)  {\n                    hour = 12\n                }\n                hour = hour + \"pm\";\n            }\n            else {\n                var hour = utcHour + \"am\"\n            }\n            var dateStr = [day, hour].join(\" \"); \n            this.props.currentForecast.list[i].dt = dateStr;\n            //human readable temp\n            var humanTemp = Math.floor(item.main.temp);\n            humanTemp = humanTemp + 'Â°'\n            this.props.currentForecast.list[i].main.temp = humanTemp;\n            //meters per second to MPH\n            var imperialWind = Math.floor(this.props.currentForecast.list[i].wind.speed *  2.237);\n            this.props.currentForecast.list[i].wind.speed = imperialWind;\n\n            i++;\n            this.forceUpdate();\n        })\n\n        // for(let i = 0; i<currentForecast.list.length;  i+=1) {\n        //     var secondsSinceEpoch = currentForecast.list[i].dt;\n        //     var date = new Date(secondsSinceEpoch * 1000);\n        //     var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n        //     var day = days[date.getUTCDay()];\n        //     var utcHour = date.getUTCHours();\n        //     if (utcHour > 12) {\n        //         var hour = utcHour - 12;\n        //         hour = hour + \"pm\";\n        //     }\n        //     else {\n        //         var hour = utcHour + \"am\"\n        //     }\n        //     var dateStr = [day, hour].join(\" \"); \n        //     this.setState({\n        //             [i]: dateStr,\n        //     })\n        // } \n\n    }\n    \n    render() {\n        var i = 0;\n            return (\n                this.props.currentForecast.list.map(item => (\n                       \n                        <div className=\"weatherTile\" key={item.dt_txt}>\n                            <p>{item.dt}</p>\n                            <img src={\"http://openweathermap.org/img/w/\" + item.weather[i].icon + \".png\"} />\n                            <p>{item.main.temp}</p>\n                            <p>{item.weather[i].description}</p>\n                            <p>{this.props.currentForecast.list[i].wind.speed}MPH</p>\n                        </div>\n                    ))\n            )\n    }\n}\n\nexport default Forecast\n\n\n"]},"metadata":{},"sourceType":"module"}