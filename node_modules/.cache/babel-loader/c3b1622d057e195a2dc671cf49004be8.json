{"ast":null,"code":"import _classCallCheck from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/src/Components/forecast.js\";\nimport React from 'react';\n\nvar Forecast =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Forecast, _React$Component);\n\n  function Forecast() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Forecast);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Forecast)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.State = {\n      0: 0 // humanTime = () => {\n      //     var currentForecast = this.props.currentForecast;\n      //     var i = 0;\n      //     var currentForecast = currentForecast.list.map(item => (\n      //         var secondsSinceEpoch = currentForecast.list[i].dt;\n      //         var date = new Date(secondsSinceEpoch * 1000);\n      //         var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n      //         var day = days[date.getUTCDay()];\n      //         var utcHour = date.getUTCHours();\n      //         if (utcHour > 12) {\n      //             var hour = utcHour - 12;\n      //             hour = hour + \"pm\";\n      //         }\n      //         else {\n      //             var hour = utcHour + \"am\"\n      //         }\n      //         var dateStr = [day, hour].join(\" \"); \n      //         this.setState({\n      //                 [i]: dateStr,\n      //         })\n      //         i++;\n      //     ))\n      // }\n\n    };\n    return _this;\n  }\n\n  _createClass(Forecast, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {//var currentForecast = this.props.currentForecast;\n      // var i = 0;\n      // this.props.currentForecast.list.map(item => {\n      //     var secondsSinceEpoch = this.props.currentForecast.list[i].dt;\n      //     var date = new Date(secondsSinceEpoch * 1000);\n      //     var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n      //     var day = days[date.getUTCDay()];\n      //     var utcHour = date.getUTCHours();\n      //     if (utcHour > 12) {\n      //         var hour = utcHour - 12;\n      //         hour = hour + \"pm\";\n      //     }\n      //     else {\n      //         var hour = utcHour + \"am\"\n      //     }\n      //     var dateStr = [day, hour].join(\" \"); \n      //     this.props.currentForecast.list[i].dt = dateStr;\n      //     i++;\n      // })\n      // for(let i = 0; i<currentForecast.list.length;  i+=1) {\n      //     var secondsSinceEpoch = currentForecast.list[i].dt;\n      //     var date = new Date(secondsSinceEpoch * 1000);\n      //     var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n      //     var day = days[date.getUTCDay()];\n      //     var utcHour = date.getUTCHours();\n      //     if (utcHour > 12) {\n      //         var hour = utcHour - 12;\n      //         hour = hour + \"pm\";\n      //     }\n      //     else {\n      //         var hour = utcHour + \"am\"\n      //     }\n      //     var dateStr = [day, hour].join(\" \"); \n      //     this.setState({\n      //             [i]: dateStr,\n      //     })\n      // } \n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var i = 0;\n      return this.props.currentForecast.list.map(function (item) {\n        return React.createElement(\"div\", {\n          className: \"weatherTile\",\n          key: item.dt_txt,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, item.dt_txt), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, _this2.state[i++]));\n      });\n    }\n  }]);\n\n  return Forecast;\n}(React.Component);\n\nexport default Forecast;","map":{"version":3,"sources":["/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/src/Components/forecast.js"],"names":["React","Forecast","State","i","props","currentForecast","list","map","item","dt_txt","state","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;IAGMC,Q;;;;;;;;;;;;;;;;;UAGHC,K,GAAQ;AACH,SAAE,CADC,CAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA1BO,K;;;;;;wCA4Ba,CAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEH;;;6BAEQ;AAAA;;AACL,UAAIC,CAAC,GAAG,CAAR;AACI,aACI,KAAKC,KAAL,CAAWC,eAAX,CAA2BC,IAA3B,CAAgCC,GAAhC,CAAoC,UAAAC,IAAI;AAAA,eAEhC;AAAK,UAAA,SAAS,EAAC,aAAf;AAA6B,UAAA,GAAG,EAAEA,IAAI,CAACC,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAID,IAAI,CAACC,MAAT,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAI,MAAI,CAACC,KAAL,CAAWP,CAAC,EAAZ,CAAJ,CAFJ,CAFgC;AAAA,OAAxC,CADJ;AASP;;;;EApFkBH,KAAK,CAACW,S;;AAuF7B,eAAeV,QAAf","sourcesContent":["import React from 'react'\n\n\nclass Forecast extends React.Component {\n    \n\n   State = {\n        0:0\n    }\n\n    // humanTime = () => {\n    //     var currentForecast = this.props.currentForecast;\n    //     var i = 0;\n    //     var currentForecast = currentForecast.list.map(item => (\n    //         var secondsSinceEpoch = currentForecast.list[i].dt;\n    //         var date = new Date(secondsSinceEpoch * 1000);\n    //         var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    //         var day = days[date.getUTCDay()];\n    //         var utcHour = date.getUTCHours();\n    //         if (utcHour > 12) {\n    //             var hour = utcHour - 12;\n    //             hour = hour + \"pm\";\n    //         }\n    //         else {\n    //             var hour = utcHour + \"am\"\n    //         }\n    //         var dateStr = [day, hour].join(\" \"); \n    //         this.setState({\n    //                 [i]: dateStr,\n    //         })\n    //         i++;\n    //     ))\n    // }\n\n    componentDidMount() {\n        //var currentForecast = this.props.currentForecast;\n        // var i = 0;\n        // this.props.currentForecast.list.map(item => {\n        //     var secondsSinceEpoch = this.props.currentForecast.list[i].dt;\n        //     var date = new Date(secondsSinceEpoch * 1000);\n        //     var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n        //     var day = days[date.getUTCDay()];\n        //     var utcHour = date.getUTCHours();\n        //     if (utcHour > 12) {\n        //         var hour = utcHour - 12;\n        //         hour = hour + \"pm\";\n        //     }\n        //     else {\n        //         var hour = utcHour + \"am\"\n        //     }\n        //     var dateStr = [day, hour].join(\" \"); \n        //     this.props.currentForecast.list[i].dt = dateStr;\n        //     i++;\n        // })\n\n        // for(let i = 0; i<currentForecast.list.length;  i+=1) {\n        //     var secondsSinceEpoch = currentForecast.list[i].dt;\n        //     var date = new Date(secondsSinceEpoch * 1000);\n        //     var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n        //     var day = days[date.getUTCDay()];\n        //     var utcHour = date.getUTCHours();\n        //     if (utcHour > 12) {\n        //         var hour = utcHour - 12;\n        //         hour = hour + \"pm\";\n        //     }\n        //     else {\n        //         var hour = utcHour + \"am\"\n        //     }\n        //     var dateStr = [day, hour].join(\" \"); \n        //     this.setState({\n        //             [i]: dateStr,\n        //     })\n        // } \n\n    }\n    \n    render() {\n        var i = 0;\n            return (\n                this.props.currentForecast.list.map(item => (\n                       \n                        <div className=\"weatherTile\" key={item.dt_txt}>\n                            <p>{item.dt_txt}</p>\n                            <p>{this.state[i++]}</p>\n                        </div>\n                    ))\n            )\n    }\n}\n\nexport default Forecast\n\n\n"]},"metadata":{},"sourceType":"module"}