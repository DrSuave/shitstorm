{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React from 'react';\n\nvar Forecast =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Forecast, _React$Component);\n\n  function Forecast() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Forecast);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Forecast)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.getForecast =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        var api_call, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"http://api.openweathermap.org/data/2.5/forecast?q=\".concat(city, \",\").concat(country, \"&units=metric&appid=\").concat(Api_Key));\n\n              case 2:\n                api_call = _context.sent;\n                _context.next = 5;\n                return api_call.json();\n\n              case 5:\n                response = _context.sent;\n\n                _this.setState({\n                  currentForecast: response\n                });\n                /*for(let i = 0; i<response.list.length;  i+=1) {\n                this.setState({\n                    [i]: response.list[i]\n                }); \n                \n                //console.log('hello' + this.state.0);\n                 var ForecastDate = response.list[i].dt_txt;\n                \n                console.log('temp');\n                // var temporaryIcon = JSON.stringify(response.list[i].weather.icon);\n                 var temporaryMax = response.list[i].main.temp;\n                // var temporaryMin = JSON.stringify(response.list[i].weather.description);\n                console.log(ForecastDate, temporaryMax);\n                 } */\n\n                /*var forecastItems = response.list.map((forecastItem)) =>\n                <div>\n                    {.dt_txt}\n                </div>\n                );*/\n\n\n                console.log('forecast');\n                console.log(response);\n\n                if (city && country) {}\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(Forecast, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getForecast();\n    }\n  }]);\n\n  return Forecast;\n}(React.Component);\n\nexport default Forecast;","map":{"version":3,"sources":["/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/src/Components/forecast.js"],"names":["React","Forecast","getForecast","e","fetch","city","country","Api_Key","api_call","json","response","setState","currentForecast","console","log","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;IAGMC,Q;;;;;;;;;;;;;;;;;;UAEFC,W;;;;;+BAAc,iBAAOC,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEaC,KAAK,6DAAsDC,IAAtD,cAA8DC,OAA9D,iCAA4FC,OAA5F,EAFlB;;AAAA;AAEJC,gBAAAA,QAFI;AAAA;AAAA,uBAGWA,QAAQ,CAACC,IAAT,EAHX;;AAAA;AAGNC,gBAAAA,QAHM;;AAIV,sBAAKC,QAAL,CAAc;AACdC,kBAAAA,eAAe,EAAEF;AADH,iBAAd;AAGA;;;;;;;;;;;;;;;AAiBA;;;;;;;AAMAG,gBAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,gBAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;;AACJ,oBAAGL,IAAI,IAAIC,OAAX,EAAmB,CAEd;;AAlCS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;wCAqCM;AAChB,WAAKJ,WAAL;AACH;;;;EAzCkBF,KAAK,CAACe,S;;AA+C7B,eAAed,QAAf","sourcesContent":["import React from 'react'\n\n\nclass Forecast extends React.Component {\n\n    getForecast = async (e) => {\n\n        const api_call = await fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&units=metric&appid=${Api_Key}`); // fetch(\"http://api.openweathermap.org/data/2.5/weather?q=London,uk&appid=8c5021109e1918aa1c478ce6b4f53c27\");// fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`);\n        var response = await api_call.json();\n        this.setState({\n        currentForecast: response\n        })\n        /*for(let i = 0; i<response.list.length;  i+=1) {\n        this.setState({\n            [i]: response.list[i]\n        }); \n        \n        //console.log('hello' + this.state.0);\n\n        var ForecastDate = response.list[i].dt_txt;\n        \n        console.log('temp');\n        // var temporaryIcon = JSON.stringify(response.list[i].weather.icon);\n\n        var temporaryMax = response.list[i].main.temp;\n        // var temporaryMin = JSON.stringify(response.list[i].weather.description);\n        console.log(ForecastDate, temporaryMax);\n\n        } */\n        /*var forecastItems = response.list.map((forecastItem)) =>\n        <div>\n            {.dt_txt}\n        </div>\n        );*/\n        \n        console.log('forecast');\n        console.log(response);\n    if(city && country){\n        \n        }\n    }\n\n    componentDidMount() {\n        this.getForecast()\n    }\n\n\n\n}\n\nexport default Forecast"]},"metadata":{},"sourceType":"module"}