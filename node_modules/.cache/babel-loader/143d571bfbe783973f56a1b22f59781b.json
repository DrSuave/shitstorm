{"ast":null,"code":"import _classCallCheck from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/src/Components/forecast.js\";\nimport React from 'react';\n\nvar Forecast =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Forecast, _React$Component);\n\n  function Forecast() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Forecast);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Forecast)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.humanReadable = function () {\n      var i = 0;\n\n      _this.props.currentForecast.list.map(function (item) {\n        //Human readable time\n        var secondsSinceEpoch = _this.props.currentForecast.list[i].dt;\n        var date = new Date(secondsSinceEpoch * 1000);\n        var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n        var day = days[date.getUTCDay()];\n        var utcHour = date.getUTCHours();\n\n        if (utcHour > 12) {\n          var hour = utcHour - 12;\n          hour = hour + \"pm\";\n        } else {\n          if (utcHour === 12) {\n            var hour = utcHour + \"pm\";\n          } else {\n            var hour = utcHour + \"am\";\n          }\n        }\n\n        var dateStr = [day, hour].join(\" \");\n        _this.props.currentForecast.list[i].dt = dateStr; //human readable temp\n\n        var humanTemp = Math.floor(item.main.temp);\n        humanTemp = humanTemp + 'Â°';\n        _this.props.currentForecast.list[i].main.temp = humanTemp; //meters per second to MPH\n\n        var imperialWind = Math.floor(_this.props.currentForecast.list[i].wind.speed * 2.237);\n        _this.props.currentForecast.list[i].wind.speed = imperialWind;\n        i++;\n\n        _this.forceUpdate();\n      });\n    };\n\n    _this.State = {\n      0: 0\n    };\n    return _this;\n  }\n\n  _createClass(Forecast, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.currentForecast.list[0].dt !== prevProps.currentForecast.list[0].dt) {\n        this.humanReadable();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.humanReadable();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.currentForecast.list.map(function (item) {\n        return React.createElement(\"div\", {\n          className: \"weatherTile\",\n          key: item.dt_txt,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"date\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, item.dt), React.createElement(\"img\", {\n          src: \"http://openweathermap.org/img/w/\" + item.weather[0].icon + \".png\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        }), React.createElement(\"p\", {\n          className: \"thick\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, item.main.temp), React.createElement(\"p\", {\n          className: \"date\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, item.weather[0].description), React.createElement(\"img\", {\n          className: \"windArrow\",\n          src: require('../img/arrow.svg'),\n          style: {\n            transform: \"rotate(\".concat(item.wind.deg, \"deg)\"),\n            width: \"20px\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }), React.createElement(\"p\", {\n          className: \"date\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, item.wind.speed, \"mph\"));\n      });\n    }\n  }]);\n\n  return Forecast;\n}(React.Component); //  <img src=\"img/arrow.svg\" style={\"transform: rotate(\"+ item.wind.deg +\")\"} />\n//  <img src=\"img/arrow.svg\" style={`transform: rotate(${item.wind.deg})`} />\n//  <img src=\"img/arrow.svg\" style={{`transform: rotate(${item.wind.deg})`}} />\n//  <img src=\"img/arrow.svg\" style={{transform: rotate(${item.wind.deg})}} />\n\n\nexport default Forecast;","map":{"version":3,"sources":["/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/src/Components/forecast.js"],"names":["React","Forecast","humanReadable","i","props","currentForecast","list","map","item","secondsSinceEpoch","dt","date","Date","days","day","getUTCDay","utcHour","getUTCHours","hour","dateStr","join","humanTemp","Math","floor","main","temp","imperialWind","wind","speed","forceUpdate","State","prevProps","dt_txt","weather","icon","description","require","transform","deg","width","Component"],"mappings":"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","sourcesContent":["import React from 'react'\n\n\nclass Forecast extends React.Component {\n\n    humanReadable = () => {\n        var i = 0;\n            this.props.currentForecast.list.map(item => {\n                //Human readable time\n                var secondsSinceEpoch = this.props.currentForecast.list[i].dt;\n                var date = new Date(secondsSinceEpoch * 1000);\n                var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n                var day = days[date.getUTCDay()];\n                var utcHour = date.getUTCHours();\n                if (utcHour > 12) {\n                    var hour = utcHour - 12;\n                    hour = hour + \"pm\";\n                }\n                else {\n                    if (utcHour === 12)  {\n                        var hour = utcHour + \"pm\"\n                    }\n                    else {\n                        var hour = utcHour + \"am\"\n                    }\n                    \n                }\n                var dateStr = [day, hour].join(\" \"); \n                this.props.currentForecast.list[i].dt = dateStr;\n                //human readable temp\n                var humanTemp = Math.floor(item.main.temp);\n                humanTemp = humanTemp + 'Â°'\n                this.props.currentForecast.list[i].main.temp = humanTemp;\n                //meters per second to MPH\n                var imperialWind = Math.floor(this.props.currentForecast.list[i].wind.speed *  2.237);\n                this.props.currentForecast.list[i].wind.speed = imperialWind;\n\n                i++;\n                this.forceUpdate();\n            })\n    }\n\n\n    componentDidUpdate(prevProps) {\n        if (this.props.currentForecast.list[0].dt !== prevProps.currentForecast.list[0].dt) {\n            this.humanReadable();\n        }\n    }\n    \n\n   State = {\n        0:0\n    }\n\n  \n\n    componentDidMount() {\n        this.humanReadable();\n    }\n\n    \n    render() {\n\n            return (\n\n                this.props.currentForecast.list.map(item => (\n                       \n                    <div className=\"weatherTile\" key={item.dt_txt} >\n                        <p className=\"date\">{item.dt}</p>\n                        <img src={\"http://openweathermap.org/img/w/\" + item.weather[0].icon + \".png\"} />\n                        <p className=\"thick\">{item.main.temp}</p>\n                        <p className=\"date\">{item.weather[0].description}</p>\n                        <img \n                            className=\"windArrow\" \n                            src={require('../img/arrow.svg')} \n                            style={{transform: `rotate(${item.wind.deg}deg)`, \n                            width: `20px`}} \n                        />\n                        <p className=\"date\">{item.wind.speed}mph</p>\n                    </div>\n                ))\n            )\n    }\n}\n\n\n//  <img src=\"img/arrow.svg\" style={\"transform: rotate(\"+ item.wind.deg +\")\"} />\n//  <img src=\"img/arrow.svg\" style={`transform: rotate(${item.wind.deg})`} />\n//  <img src=\"img/arrow.svg\" style={{`transform: rotate(${item.wind.deg})`}} />\n//  <img src=\"img/arrow.svg\" style={{transform: rotate(${item.wind.deg})}} />\n\nexport default Forecast\n\n\n"]},"metadata":{},"sourceType":"module"}