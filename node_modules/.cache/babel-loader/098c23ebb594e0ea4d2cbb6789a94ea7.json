{"ast":null,"code":"import _regeneratorRuntime from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Autosuggest from 'react-autosuggest';\nvar Api_Key = \"8c5021109e1918aa1c478ce6b4f53c27\";\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: undefined //getWeather is a method we'll use to make the api call\n\n    };\n\n    _this.getWeather =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        var city, country, api_call, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                city = 'Croydon'; //e.target.elements.city.value;\n\n                country = 'GB'; //e.target.elements.country.value;\n                //e.preventDefault();   \n\n                _context.next = 4;\n                return fetch(\"http://api.openweathermap.org/data/2.5/weather?q=\".concat(city, \",\").concat(country, \"&units=metric&appid=\").concat(Api_Key));\n\n              case 4:\n                api_call = _context.sent;\n                _context.next = 7;\n                return api_call.json();\n\n              case 7:\n                response = _context.sent;\n                console.log(response);\n\n                if (city && country) {\n                  _this.setState({\n                    temperature: response.main.temp,\n                    city: response.name,\n                    country: response.sys.country,\n                    humidity: response.main.humidity,\n                    description: response.weather[0].description,\n                    error: \"\"\n                  });\n                } else {\n                  _this.setState({\n                    error: \"Please input search values...\"\n                  });\n                }\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getWeather();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"main\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-xs-5 title-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(Autosuggest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"col-xs-7 form-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"Temp: \", this.state.temperature), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"description: \", this.state.description), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"city: \", this.state.city), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"country: \", this.state.country), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"humidity: \", this.state.humidity), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, this.state.message ? \"error: \".concat(this.state.message) : '')))))));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/wilfhorsfall/Google Drive/sites/shitstorm/shitstorm/src/App.js"],"names":["React","Component","Autosuggest","Api_Key","App","state","temperature","undefined","city","country","humidity","description","error","getWeather","e","fetch","api_call","json","response","console","log","setState","main","temp","name","sys","weather","message"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Autosuggest from 'react-autosuggest';\n\nconst Api_Key = \"8c5021109e1918aa1c478ce6b4f53c27\";\n\nclass App extends React.Component {\n\n  state = {\n\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  //getWeather is a method we'll use to make the api call\n  getWeather = async (e) => {\n\n    const city = 'Croydon'; //e.target.elements.city.value;\n    const country = 'GB'; //e.target.elements.country.value;\n    //e.preventDefault();   \n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&units=metric&appid=${Api_Key}`); // fetch(\"http://api.openweathermap.org/data/2.5/weather?q=London,uk&appid=8c5021109e1918aa1c478ce6b4f53c27\");// fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`);\n    const response = await api_call.json();\n    console.log(response);\n   if(city && country){\n      this.setState({\n        temperature: response.main.temp,\n        city: response.name,\n        country: response.sys.country,\n        humidity: response.main.humidity,\n        description: response.weather[0].description,\n        error: \"\"\n     })\n    } else {\n      this.setState({\n        error: \"Please input search values...\"\n      })\n    }\n  }\n\n  componentDidMount() {\n    this.getWeather()\n  }\n\n  render() {\n\n    return (\n\n      <div>\n         <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                    <Autosuggest />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                <p>Temp: {this.state.temperature}</p>\n                <p>description: {this.state.description}</p>\n                <p>city: {this.state.city}</p>\n                <p>country: {this.state.country}</p>\n                <p>humidity: {this.state.humidity}</p>\n                <p>{this.state.message ? `error: ${this.state.message}` : ''}</p>\n                  \n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    )\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}